<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="60" failures="1" skipped="0" tests="63" time="3.280" timestamp="2022-12-13T20:50:27.190607" hostname="fv-az400-112"><testcase classname="tests.unit_tests.test_authenticator" name="test_authenticator__access_token_from_refresh_token" time="0.068"><failure message="AssertionError: assert 'VaultTec-Co' == ''&#10;  + VaultTec-Co">@pytest.mark.vcr()
    def test_authenticator__access_token_from_refresh_token():
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.yaml"):
            psnawp = psnawp_api.psnawp.PSNAWP(os.getenv("NPSSO_CODE"))
            psnawp._request_builder.authenticator._auth_properties["access_token_expires_at"] = time.time() - 3600
            client = psnawp.me()
&gt;           assert client.online_id == os.getenv("USER_NAME")
E           AssertionError: assert 'VaultTec-Co' == ''
E             + VaultTec-Co

tests/unit_tests/test_authenticator.py:17: AssertionError</failure></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__authentication" time="0.031" /><testcase classname="tests.unit_tests.test_client" name="test_client__incorrect_npsso" time="0.023" /><testcase classname="tests.unit_tests.test_client" name="test_client__online_id" time="0.370"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__account_id" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__get_profile_legacy" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__account_devices" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__get_friends" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__get_groups" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__available_to_play" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__blocked_list" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__trophy_summary" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__trophy_titles" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__trophy_titles_for_title" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__trophies" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__trophy_groups_summary" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__repr_and_str" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__np_communication_id" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__wrong_title_id" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__get_title_details" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__trophies" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__trophy_groups_summary" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__trophies_game_not_owned_by_user" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__trophy_groups_summary_game_not_owned_by_user" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__trophies_invalid_np_communication_id" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__trophy_groups_summary_invalid_np_communication_id" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__group_incorrect_args" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__group_with_wrong_id" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__group_with_users" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__group_with_id" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__repr_and_str" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__change_name_dm" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__dming_blocked_user" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__change_name" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__leave_group" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_search" name="test_search__universal_search" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_search" name="test_search__get_title_id" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_search" name="test_search__get_title_id_wrong_title" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__user" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__user_account_id" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__user_no_argument" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__user_wrong_acc_id" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__prev_online_id" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__user_not_found" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__user_acct_id_not_found" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__get_profile" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__get_presence" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__get_presence_forbidden" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__friendship" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__is_blocked" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_summary" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_summary_forbidden" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_titles" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_titles_forbidden" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_titles_pagination_test" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_titles_for_title" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_titles_for_title_forbidden" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__trophies" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__trophies_forbidden" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__trophies_pagination_test" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_groups_summary" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_groups_summary_forbidden" time="0.001"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__repr_and_str" time="0.003"><error message="failed on setup with &quot;requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    self._request_builder = request_builder.RequestBuilder(authenticator.Authenticator(npsso_cookie))
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:34: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:112: in _authenticate
    response.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Response [400]&gt;

    def raise_for_status(self):
        """Raises :class:`HTTPError`, if one occurred."""
    
        http_error_msg = ""
        if isinstance(self.reason, bytes):
            # We attempt to decode utf-8 first because some servers
            # choose to localize their reason strings. If the string
            # isn't utf-8, we fall back to iso-8859-1 for all other
            # encodings. (See PR #3538)
            try:
                reason = self.reason.decode("utf-8")
            except UnicodeDecodeError:
                reason = self.reason.decode("iso-8859-1")
        else:
            reason = self.reason
    
        if 400 &lt;= self.status_code &lt; 500:
            http_error_msg = (
                f"{self.status_code} Client Error: {reason} for url: {self.url}"
            )
    
        elif 500 &lt;= self.status_code &lt; 600:
            http_error_msg = (
                f"{self.status_code} Server Error: {reason} for url: {self.url}"
            )
    
        if http_error_msg:
&gt;           raise HTTPError(http_error_msg, response=self)
E           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/models.py:1021: HTTPError</error></testcase></testsuite></testsuites>